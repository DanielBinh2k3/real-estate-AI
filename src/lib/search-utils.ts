import { getProxyServerConfig, getPerplexityConfig, checkAIProviderStatus } from './config';

interface PerplexityMessage {
  role: string;
  content: string;
}

interface AIResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

interface AIProviderResult {
  content: string;
  provider: 'proxy' | 'perplexity';
  success: boolean;
  error?: string;
}

/**
 * Secure API call wrapper with masked logging
 */
async function makeSecureAPICall(
  url: string, 
  body: string, 
  headers: Record<string, string>,
  timeout: number,
  provider: string
): Promise<Response> {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);

  try {
    console.log(`üîí Making secure API call to ${provider}`);
    console.log(`‚è±Ô∏è  Timeout set to ${timeout}ms`);
    
    const response = await fetch(url, {
      method: "POST",
      headers: headers,
      body: body,
      signal: controller.signal,
    });

    clearTimeout(timeoutId);
    
    if (!response.ok) {
      console.warn(`‚ö†Ô∏è  ${provider} API returned ${response.status}`);
    } else {
      console.log(`‚úÖ ${provider} API call successful`);
    }
    
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    if (error instanceof Error && error.name === 'AbortError') {
      console.warn(`‚è∞ ${provider} API timeout after ${timeout}ms`);
      throw new Error(`${provider} API timeout`);
    }
    console.warn(`‚ùå ${provider} API error:`, error instanceof Error ? error.message : 'Unknown error');
    throw error;
  }
}

/**
 * Call Proxy Server API (Primary provider)
 */
async function callProxyServer(userPrompt: string): Promise<AIProviderResult> {
  try {
    const proxyConfig = getProxyServerConfig();
    
    if (!proxyConfig) {
      return {
        content: '',
        provider: 'proxy',
        success: false,
        error: 'Proxy server not available or disabled'
      };
    }

    console.log('üöÄ Attempting Proxy Server API call...');

    const headers = {
      "Authorization": `Bearer ${proxyConfig.apiKey}`,
      "Content-Type": "application/json",
    };

    const requestBody = JSON.stringify({
      "model": proxyConfig.model,
      "messages": [
        {
          "role": "system",
          "content": "B·∫°n l√† chuy√™n gia b·∫•t ƒë·ªông s·∫£n, tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·∫≠p trung v√†o gi√° tr·ªã th·ª±c t·∫ø. K·∫øt qu·∫£ tr·∫£ v·ªÅ ph·∫£i l√† m·ªôt object JSON chu·∫©n v·ªõi c√°c tr∆∞·ªùng: - \"gi√° trung b√¨nh\": Gi√° trung b√¨nh khu v·ª±c theo ƒë∆∞·ªùng, ƒë∆°n v·ªã VND/m2. - \"c√°c tin rao b√°n\": Danh s√°ch c√°c tin rao b√°n b·∫•t ƒë·ªông s·∫£n t∆∞∆°ng t·ª± (c√πng ƒë∆∞·ªùng, di·ªán t√≠ch t∆∞∆°ng t·ª±, v·ªã tr√≠ nh√† ph·ªë/h·∫ªm) t·ª´ c√°c website b·∫•t ƒë·ªông s·∫£n uy t√≠n, m·ªói tin g·ªìm: ti√™u ƒë·ªÅ, gi√°, di·ªán t√≠ch, ƒë·ªãa ch·ªâ, link (n·∫øu c√≥). Kh√¥ng tr·∫£ v·ªÅ b·∫•t k·ª≥ link url ngo√†i tr∆∞·ªùng \"link\" trong t·ª´ng tin rao, kh√¥ng tr·∫£ v·ªÅ text ngo√†i JSON."
        },
        {
          "role": "user",
          "content": userPrompt
        }
      ],
      "max_tokens": 500,
      "temperature": 0.2
    });

    const response = await makeSecureAPICall(
      proxyConfig.baseUrl,
      requestBody,
      headers,
      proxyConfig.timeout,
      'Proxy Server'
    );

    if (response.ok) {
      const data: AIResponse = await response.json();
      
      if (data.choices && data.choices[0] && data.choices[0].message) {
        console.log('‚úÖ Proxy Server API successful');
        return {
          content: data.choices[0].message.content,
          provider: 'proxy',
          success: true
        };
      } else {
        throw new Error('Invalid response format from proxy server');
      }
    } else {
      const errorText = await response.text();
      throw new Error(`Proxy server returned ${response.status}: ${errorText}`);
    }

  } catch (error) {
    console.warn('‚ùå Proxy Server failed:', error instanceof Error ? error.message : 'Unknown error');
    return {
      content: '',
      provider: 'proxy',
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Call Perplexity AI API (Fallback provider)
 */
async function callPerplexityAPI(userPrompt: string): Promise<AIProviderResult> {
  try {
    const perplexityConfig = getPerplexityConfig();
    
    console.log('üîÑ Attempting Perplexity API call (fallback)...');

    const headers = {
      "Authorization": `Bearer ${perplexityConfig.apiKey}`,
      "Content-Type": "application/json",
    };

    const requestBody = JSON.stringify({
      "model": perplexityConfig.model,
      "messages": [
        {
          "role": "system",
          "content": "B·∫°n l√† chuy√™n gia b·∫•t ƒë·ªông s·∫£n, tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·∫≠p trung v√†o gi√° tr·ªã th·ª±c t·∫ø. K·∫øt qu·∫£ tr·∫£ v·ªÅ ph·∫£i l√† m·ªôt object JSON chu·∫©n v·ªõi c√°c tr∆∞·ªùng: - \"gi√° trung b√¨nh\": Gi√° trung b√¨nh khu v·ª±c theo ƒë∆∞·ªùng, ƒë∆°n v·ªã VND/m2. - \"c√°c tin rao b√°n\": Danh s√°ch c√°c tin rao b√°n b·∫•t ƒë·ªông s·∫£n t∆∞∆°ng t·ª± (c√πng ƒë∆∞·ªùng, di·ªán t√≠ch t∆∞∆°ng t·ª±, v·ªã tr√≠ nh√† ph·ªë/h·∫ªm) t·ª´ c√°c website b·∫•t ƒë·ªông s·∫£n uy t√≠n, m·ªói tin g·ªìm: ti√™u ƒë·ªÅ, gi√°, di·ªán t√≠ch, ƒë·ªãa ch·ªâ, link (n·∫øu c√≥). Kh√¥ng tr·∫£ v·ªÅ b·∫•t k·ª≥ link url ngo√†i tr∆∞·ªùng \"link\" trong t·ª´ng tin rao, kh√¥ng tr·∫£ v·ªÅ text ngo√†i JSON."
        },
        {
          "role": "user",
          "content": userPrompt
        }
      ],
      "max_tokens": 500,
      "temperature": 0.2
    });

    const response = await makeSecureAPICall(
      perplexityConfig.baseUrl,
      requestBody,
      headers,
      perplexityConfig.timeout,
      'Perplexity'
    );

    if (response.ok) {
      const data: AIResponse = await response.json();
      
      if (data.choices && data.choices[0] && data.choices[0].message) {
        console.log('‚úÖ Perplexity API successful');
        return {
          content: data.choices[0].message.content,
          provider: 'perplexity',
          success: true
        };
      } else {
        throw new Error('Invalid response format from Perplexity');
      }
    } else {
      const errorText = await response.text();
      throw new Error(`Perplexity returned ${response.status}: ${errorText}`);
    }

  } catch (error) {
    console.warn('‚ùå Perplexity API failed:', error instanceof Error ? error.message : 'Unknown error');
    return {
      content: '',
      provider: 'perplexity',
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * G·ªçi AI API v·ªõi fallback mechanism: Proxy Server ‚Üí Perplexity
 */
export async function searchRealEstateData(location: string, parsedAddress?: any, propertyDetails?: any, streetName?: string): Promise<string> {
  try {
    console.log('üîç searchRealEstateData called with:', {
      location,
      streetName,
      propertyType: propertyDetails?.type,
      landArea: propertyDetails?.landArea
    });

    // Check provider availability first
    const providerStatus = checkAIProviderStatus();
    console.log('üîç AI Provider Status:', {
      proxy: providerStatus.proxy.available ? 'Available' : 'Not Available',
      perplexity: providerStatus.perplexity.available ? 'Available' : 'Not Available'
    });
    
    const currentYear = new Date().getFullYear();
    // L·∫•y th√¥ng tin chi ti·∫øt
    const street = streetName || parsedAddress?.street || '';
    const ward = parsedAddress?.ward || '';
    const district = parsedAddress?.district || '';
    const city = parsedAddress?.city || '';
    const landArea = propertyDetails?.landArea || '';
    const type = propertyDetails?.type || '';
    const alleyType = propertyDetails?.alleyType || '';
    const laneWidth = propertyDetails?.laneWidth || '';

    // Map property type to Vietnamese description
    const getPropertyTypeDescription = (type: string): string => {
      const typeMap: Record<string, string> = {
        'apartment': 'chung_cu',
        'lane_house': 'nha_hem_ngo', 
        'town_house': 'nha_mat_pho',
        'land': 'ban_dat',
        'villa': 'biet_thu_lien_ke',
        'NORMAL': 'nha_mat_pho'
      };
      return typeMap[type] || type;
    };

    let userPrompt = `T√¨m ki·∫øm c√°c b·∫•t ƒë·ªông s·∫£n rao b√°n tr√™n c√°c website uy t√≠n t·∫°i: Batdongsanonline.vn,  Batdongsan.com.vn, Alonhadat.com.vn,Homedy.com`;
    if (street) userPrompt += `\n- ƒê∆∞·ªùng: ${street}`;
    if (ward) userPrompt += `\n- Ph∆∞·ªùng: ${ward}`;
    if (district) userPrompt += `\n- Qu·∫≠n: ${district}`;
    if (city) userPrompt += `\n- Th√†nh ph·ªë: ${city}`;
    if (type) userPrompt += `\n- Lo·∫°i b·∫•t ƒë·ªông s·∫£n: ${getPropertyTypeDescription(type)}`;
    if (landArea) userPrompt += `\n- Di·ªán t√≠ch: kho·∫£ng ${landArea} m2`;
    if (type || alleyType || laneWidth) {
      userPrompt += `\n- V·ªã tr√≠: `;
      if (type) userPrompt += `${getPropertyTypeDescription(type)}`;
      if (alleyType) userPrompt += ` (${alleyType}`;
      if (alleyType && laneWidth) userPrompt += ", ";
      if (laneWidth) userPrompt += `l·ªô gi·ªõi ${laneWidth}m`;
      if (alleyType) userPrompt += ")";
    }
    userPrompt += `\nT√¨m ki·∫øm ∆∞u ti√™n th·ª© t·ª± c√°c tin c√πng ƒë∆∞·ªùng, c√πng lo·∫°i b·∫•t ƒë·ªông s·∫£n (${getPropertyTypeDescription(type)}), di·ªán t√≠ch t∆∞∆°ng t·ª± (¬±10%). Tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON nh∆∞ h∆∞·ªõng d·∫´n.`;

    console.log(`üîç Search prompt prepared (${userPrompt.length} characters)`);

    // Try Proxy Server first (Primary)
    if (providerStatus.proxy.available) {
      console.log('üöÄ Trying primary provider: Proxy Server');
      const proxyResult = await callProxyServer(userPrompt);
      
      if (proxyResult.success && proxyResult.content) {
        console.log('‚úÖ Proxy Server successful, formatting response...');
        return formatAIResponse(proxyResult.content, location, parsedAddress, 'proxy');
      } else {
        console.log('‚ùå Proxy Server failed, trying fallback...');
      }
    } else {
      console.log('‚ö†Ô∏è  Proxy Server not available, skipping to fallback');
    }

    // Fallback to Perplexity
    if (providerStatus.perplexity.available) {
      console.log('üîÑ Trying fallback provider: Perplexity');
      const perplexityResult = await callPerplexityAPI(userPrompt);
      
      if (perplexityResult.success && perplexityResult.content) {
        console.log('‚úÖ Perplexity successful, formatting response...');
        return formatAIResponse(perplexityResult.content, location, parsedAddress, 'perplexity');
      } else {
        console.log('‚ùå Perplexity also failed');
      }
    } else {
      console.log('‚ö†Ô∏è  Perplexity not available');
    }

    // All providers failed
    console.warn('‚ùå All AI providers failed');
    return '';

  } catch (error) {
    console.error('‚ùå Critical error in searchRealEstateData:', error);
    return '';
  }
}

/**
 * Format response t·ª´ AI th√†nh d·∫°ng ph√π h·ª£p cho AI prompt v·ªõi provider info
 */
function formatAIResponse(content: string, location: string, parsedAddress?: any, provider?: string): string {
  // T·∫°o location context
  const locationContext = parsedAddress 
    ? `${parsedAddress.ward}, ${parsedAddress.district}, ${parsedAddress.city}` 
    : location;

  // Tr√≠ch xu·∫•t th√¥ng tin gi√° t·ª´ response
  const priceInfo = extractPriceInfoFromContent(content);
  const trendInfo = extractTrendInfoFromContent(content);

  const providerInfo = provider ? ` (via ${provider === 'proxy' ? 'Proxy Server' : 'Perplexity'})` : '';

  return `
**D·ªØ li·ªáu search ƒë∆∞·ª£c t·ª´ AI${providerInfo} v·ªÅ ${locationContext}:**

**Th√¥ng tin ch√≠nh:**
${content}

**Th√¥ng tin gi√° tr√≠ch xu·∫•t:**
${priceInfo}

**Xu h∆∞·ªõng th·ªã tr∆∞·ªùng:**
${trendInfo}

**T√≥m t·∫Øt:** Th√¥ng tin v·ªÅ b·∫•t ƒë·ªông s·∫£n t·∫°i ${locationContext} ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ c√°c ngu·ªìn tin t·ª©c v√† d·ªØ li·ªáu th·ªã tr∆∞·ªùng m·ªõi nh·∫•t nƒÉm ${new Date().getFullYear()}${providerInfo}.
`.trim();
}

/**
 * Tr√≠ch xu·∫•t th√¥ng tin gi√° t·ª´ content
 */
function extractPriceInfoFromContent(content: string): string {
  const pricePattern = /(\d+(?:\.\d+)?)\s*(tri·ªáu|t·ª∑|tr)/gi;
  const prices = [...content.matchAll(pricePattern)];
  
  if (prices.length > 0) {
    const priceList = prices.slice(0, 3).map(match => match[0]).join(', ');
    return `- Gi√° tham kh·∫£o: ${priceList}`;
  }
  
  return '- Ch∆∞a t√¨m th·∫•y th√¥ng tin gi√° c·ª• th·ªÉ trong k·∫øt qu·∫£.';
}

/**
 * Tr√≠ch xu·∫•t th√¥ng tin xu h∆∞·ªõng t·ª´ content
 */
function extractTrendInfoFromContent(content: string): string {
  const trendKeywords = ['tƒÉng', 'gi·∫£m', '·ªïn ƒë·ªãnh', 'bi·∫øn ƒë·ªông', 'xu h∆∞·ªõng'];
  const lines = content.split('\n');
  
  const trendLines = lines.filter(line => 
    trendKeywords.some(keyword => line.toLowerCase().includes(keyword))
  );
  
  if (trendLines.length > 0) {
    return trendLines.slice(0, 2).map(line => `- ${line.trim()}`).join('\n');
  }
  
  return '- Th√¥ng tin xu h∆∞·ªõng s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t d·ª±a tr√™n d·ªØ li·ªáu th·ªã tr∆∞·ªùng.';
}

/**
 * Tr√≠ch xu·∫•t c√°c keywords location t·ª´ ƒë·ªãa ch·ªâ ƒë·∫ßu v√†o
 */
function extractLocationKeywords(location: string, parsedAddress?: any): string[] {
  const keywords: string[] = [];
  
  // Th√™m to√†n b·ªô location
  keywords.push(location);
  
  // T√°ch c√°c th√†nh ph·∫ßn ƒë·ªãa ch·ªâ
  const parts = location.split(',').map(part => part.trim());
  keywords.push(...parts);
  
  // Th√™m th√¥ng tin t·ª´ parsedAddress n·∫øu c√≥
  if (parsedAddress) {
    if (parsedAddress.city) keywords.push(parsedAddress.city);
    if (parsedAddress.district) keywords.push(parsedAddress.district);
    if (parsedAddress.ward) keywords.push(parsedAddress.ward);
  }
  
  // Th√™m c√°c t·ª´ kh√≥a chung
  keywords.push('b·∫Øc ninh', 't·ª´ s∆°n');
  
  return keywords.filter(k => k.length > 0);
}

/**
 * L·∫•y keywords cho t·ªânh/th√†nh ph·ªë t·ª´ parsedAddress
 */
function getCityProvinceKeywords(parsedAddress?: any): string[] {
  const keywords: string[] = [];
  
  if (!parsedAddress) return keywords;
  
  // Mapping c√°c city codes th√†nh t√™n ƒë·∫ßy ƒë·ªß
  const cityMapping: Record<string, string[]> = {
    'ha_noi': ['h√† n·ªôi', 'hanoi', 'th·ªß ƒë√¥'],
    'ho_chi_minh': ['h·ªì ch√≠ minh', 'ho chi minh', 's√†i g√≤n', 'saigon'],
    'bac_ninh': ['b·∫Øc ninh', 'bac ninh'],
    'hai_phong': ['h·∫£i ph√≤ng', 'hai phong'],
    'da_nang': ['ƒë√† n·∫µng', 'da nang'],
    'binh_duong': ['b√¨nh d∆∞∆°ng', 'binh duong'],
    'dong_nai': ['ƒë·ªìng nai', 'dong nai'],
  };
  
  // Th√™m t·ª´ city code
  if (parsedAddress.city && cityMapping[parsedAddress.city]) {
    keywords.push(...cityMapping[parsedAddress.city]);
  }
  
  // Th√™m tr·ª±c ti·∫øp n·∫øu kh√¥ng c√≥ trong mapping
  if (parsedAddress.city) {
    keywords.push(parsedAddress.city.replace(/_/g, ' '));
  }
  
  return keywords;
}

 