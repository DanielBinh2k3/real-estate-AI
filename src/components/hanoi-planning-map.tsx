'use client';

import { MapContainer, TileLayer, Marker, Popup, useMapEvents, Polygon } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { useEffect, useState } from 'react';
import { getGeoapifyApiKey } from '@/lib/config';

// Interface for planning data
interface PlanningData {
  success: boolean;
  data?: {
    status: number;
    points: Array<{ lat: number; lng: number }>;

    address: string;
    id: number;
    province_id: string;
    district_id: string;
    ward_id: string;
    html: string;
  };
  message?: string;
  status_code?: number;
}

// Component for handling map clicks
function MapClickHandler({ onMapClick }: { onMapClick: (lat: number, lng: number) => void }) {
  useMapEvents({
    click: (e) => {
      onMapClick(e.latlng.lat, e.latlng.lng);
    },
  });
  return null;
}

// Component for parsing and displaying HTML content
function PlanningInfoDisplay({ htmlContent }: { htmlContent: string }) {  const [parsedInfo, setParsedInfo] = useState<{
    title: string;
    address: string;
    planningInfo: Array<{ area: string; type: string; details: string; color: string }>;
    coordinates: { lat: number; lng: number } | null;
    itemId: string;
    landType: { id: string; area: string; description: string } | null;
  } | null>(null);
  useEffect(() => {
    if (htmlContent) {
      try {
        console.log('Raw HTML content:', htmlContent); // Debug log
        
        // Parse HTML and extract useful information
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlContent, 'text/html');
        
        // Extract title (th√¥ng tin th·ª≠a ƒë·∫•t)
        const titleElement = doc.querySelector('.sqh-pin-inf__tle');
        const title = titleElement?.textContent?.trim() || '';
        
        // Extract address (ƒë·ªãa ch·ªâ)
        const addressElement = doc.querySelector('.sqh-pin-inf__adr');
        const address = addressElement?.textContent?.trim() || '';
        
        // Extract coordinates from hidden form fields
        const latInput = doc.querySelector('input[name="lat"]') as HTMLInputElement;
        const lngInput = doc.querySelector('input[name="lng"]') as HTMLInputElement;
        const itemIdInput = doc.querySelector('input[name="item_id"]') as HTMLInputElement;
        
        const coordinates = latInput && lngInput ? {
          lat: parseFloat(latInput.value),
          lng: parseFloat(lngInput.value)
        } : null;
          const itemId = itemIdInput?.value || '';
        
        // Extract land type info (.type-info)
        const typeInfoElement = doc.querySelector('.type-info');
        let landType = null;
        if (typeInfoElement) {
          const typeId = typeInfoElement.querySelector('.type-info__id')?.textContent?.trim() || '';
          const typeArea = typeInfoElement.querySelector('.type-info__sqr')?.textContent?.trim() || '';
          const typeDescription = typeInfoElement.querySelector('.type-info__txt')?.textContent?.trim() || '';
          landType = { id: typeId, area: typeArea, description: typeDescription };
        }
        
        // Extract planning info - Try multiple methods
        let planningInfo: Array<{ area: string; type: string; details: string; color: string }> = [];
        
        // Method 1: Original format with .text-col and .text-col__lbl
        const textCols = Array.from(doc.querySelectorAll('.text-col'));
        if (textCols.length > 0) {
          planningInfo = textCols.map(col => {
            const areaElement = col.querySelector('.text-col__lbl');
            const area = areaElement?.textContent?.trim() || '';
            
            const typeElement = col.querySelector('.text-col__txt div[style*="background-color"]');
            const type = typeElement?.textContent?.trim() || '';
            
            // Extract background color from style attribute
            const styleAttr = typeElement?.getAttribute('style') || '';
            const colorMatch = styleAttr.match(/background-color:\s*([^;]+)/);
            const color = colorMatch ? colorMatch[1].trim() : '#gray';
            
            // Get details from the second div in text-col__txt
            const detailsElement = col.querySelector('.text-col__txt div:last-child');
            const details = detailsElement?.textContent?.trim() || '';
            
            return { area, type, details, color };
          }).filter(item => item.area && item.type);
        }
        
        // Method 2: New format with .text-col__txt having style directly
        if (planningInfo.length === 0) {
          const directStyleElements = Array.from(doc.querySelectorAll('.text-col__txt[style*="background-color"]'));
          planningInfo = directStyleElements.map((element) => {
            const type = element.textContent?.trim() || '';
            const styleAttr = element.getAttribute('style') || '';
            const colorMatch = styleAttr.match(/background-color:\s*([^;]+)/);
            const color = colorMatch ? colorMatch[1].trim() : '#gray';
            
            // For new format, area might be in the title or we use 'N/A'
            const area = 'Xem th√¥ng tin th·ª≠a ƒë·∫•t'; // Fallback
            
            return { area, type, details: '', color };
          }).filter(item => item.type);
        }        console.log('Parsed planning info:', planningInfo); // Debug log

        setParsedInfo({ title, address, planningInfo, coordinates, itemId, landType });
      } catch (error) {
        console.error('Error parsing HTML content:', error);
        setParsedInfo(null);
      }
    }
  }, [htmlContent]);

  if (!parsedInfo) {
    return (
      <div className="space-y-4">
        <div className="p-4 bg-yellow-50 rounded-lg border-l-4 border-yellow-400">
          <h4 className="font-semibold text-yellow-800 mb-2">‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch HTML</h4>
          <p className="text-yellow-700 text-sm">
            D·ªØ li·ªáu HTML kh√¥ng th·ªÉ ƒë∆∞·ª£c ph√¢n t√≠ch t·ª± ƒë·ªông. Xem raw HTML b√™n d∆∞·ªõi:
          </p>
        </div>
        <details className="bg-gray-50 p-4 rounded-lg border">
          <summary className="font-medium text-gray-700 cursor-pointer mb-2">
            Xem raw HTML (debug)
          </summary>
          <div className="bg-white p-3 rounded border">
            <pre className="text-xs overflow-auto max-h-96 whitespace-pre-wrap">
              {htmlContent}
            </pre>
          </div>
        </details>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Th√¥ng tin th·ª≠a ƒë·∫•t */}
      {parsedInfo.title && (
        <div className="bg-blue-50 p-4 rounded-lg border-l-4 border-blue-400">
          <h4 className="font-semibold text-blue-800 mb-2">üìç Th√¥ng tin th·ª≠a ƒë·∫•t</h4>
          <p className="text-blue-700 font-medium">{parsedInfo.title}</p>
          {parsedInfo.itemId && (
            <p className="text-sm text-blue-600 mt-1">ID: {parsedInfo.itemId}</p>
          )}
        </div>
      )}
      
      {/* Lo·∫°i ƒë·∫•t */}
      {parsedInfo.landType && (
        <div className="bg-orange-50 p-4 rounded-lg border-l-4 border-orange-400">
          <h4 className="font-semibold text-orange-800 mb-2">üè∑Ô∏è Th√¥ng tin lo·∫°i ƒë·∫•t</h4>
          <div className="space-y-1">
            <p className="text-orange-700"><span className="font-medium">M√£:</span> {parsedInfo.landType.id}</p>
            <p className="text-orange-700"><span className="font-medium">Di·ªán t√≠ch:</span> {parsedInfo.landType.area}</p>
            <p className="text-orange-700"><span className="font-medium">Lo·∫°i:</span> {parsedInfo.landType.description}</p>
          </div>
        </div>
      )}
      
      {/* ƒê·ªãa ch·ªâ */}
      {parsedInfo.address && (
        <div className="bg-green-50 p-4 rounded-lg border-l-4 border-green-400">
          <h4 className="font-semibold text-green-800 mb-2">üìç ƒê·ªãa ch·ªâ</h4>
          <p className="text-green-700">{parsedInfo.address}</p>
        </div>
      )}
      
      {/* T·ªça ƒë·ªô */}
      {parsedInfo.coordinates && (
        <div className="bg-purple-50 p-4 rounded-lg border-l-4 border-purple-400">
          <h4 className="font-semibold text-purple-800 mb-2">üåê T·ªça ƒë·ªô</h4>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="font-medium text-purple-700">Latitude:</span>
              <p className="text-purple-600 font-mono">{parsedInfo.coordinates.lat}</p>
            </div>
            <div>
              <span className="font-medium text-purple-700">Longitude:</span>
              <p className="text-purple-600 font-mono">{parsedInfo.coordinates.lng}</p>
            </div>
          </div>
        </div>
      )}
      
      {/* Th√¥ng tin quy ho·∫°ch x√¢y d·ª±ng */}
      {parsedInfo.planningInfo.length > 0 && (
        <div className="bg-gray-50 p-4 rounded-lg border-l-4 border-gray-400">
          <h4 className="font-semibold text-gray-800 mb-3">üèóÔ∏è Th√¥ng tin quy ho·∫°ch x√¢y d·ª±ng</h4>
          <div className="space-y-3">
            {parsedInfo.planningInfo.map((item, index) => (
              <div key={index} className="bg-white p-3 rounded-lg border shadow-sm">
                <div className="flex items-start gap-3">
                  <div 
                    className="w-5 h-5 rounded mt-1 flex-shrink-0 border"
                    style={{ backgroundColor: item.color }}
                    title={`M√†u: ${item.color}`}
                  />
                  <div className="flex-1 min-w-0">
                    <div className="flex justify-between items-start mb-2">
                      <h5 className="font-medium text-gray-800 leading-tight">{item.type}</h5>
                      <span className="text-sm font-bold text-blue-600 bg-blue-100 px-2 py-1 rounded">
                        {item.area}
                      </span>
                    </div>
                    {item.details && (
                      <p className="text-sm text-gray-600 leading-relaxed">{item.details}</p>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* L∆∞u √Ω */}
      <div className="bg-yellow-50 p-4 rounded-lg border-l-4 border-yellow-400">
        <h4 className="font-semibold text-yellow-800 mb-2">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng</h4>
        <p className="text-sm text-yellow-700 leading-relaxed">
          D·ªØ li·ªáu n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Vui l√≤ng cƒÉn c·ª© theo m√†u s·∫Øc, k√Ω hi·ªáu ƒë·∫•t tr√™n t·ª´ng lo·∫°i b·∫£n ƒë·ªì 
          v√† ki·ªÉm tra l·∫°i v·ªõi c∆° quan ch·ª©c nƒÉng c√≥ th·∫©m quy·ªÅn tr∆∞·ªõc khi th·ª±c hi·ªán c√°c giao d·ªãch b·∫•t ƒë·ªông s·∫£n.
        </p>
      </div>      {/* Actions */}
      <div className="bg-gray-50 p-4 rounded-lg border-l-4 border-gray-400">
        <h4 className="font-semibold text-gray-800 mb-3">üîß Thao t√°c</h4>
        <div className="grid grid-cols-2 gap-3">
          {parsedInfo.coordinates && (
            <a
              href={`https://www.google.com/maps/search/?api=1&query=${parsedInfo.coordinates.lat},${parsedInfo.coordinates.lng}`}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
            >
              <span>üó∫Ô∏è</span>
              <span>M·ªü Google Maps</span>
            </a>
          )}
          <button
            onClick={() => {
              if (parsedInfo.coordinates) {
                navigator.clipboard.writeText(`${parsedInfo.coordinates.lat}, ${parsedInfo.coordinates.lng}`);
                alert('ƒê√£ copy t·ªça ƒë·ªô v√†o clipboard!');
              }
            }}
            className="flex items-center gap-2 px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm"
          >
            <span>üìã</span>
            <span>Copy t·ªça ƒë·ªô</span>
          </button>
        </div>
      </div>
      
      {/* Th√¥ng tin g·ªëc t·ª´ API */}
      <div className="bg-orange-50 p-4 rounded-lg border-l-4 border-orange-400">
        <h4 className="font-semibold text-orange-800 mb-3">üìú Th√¥ng tin g·ªëc t·ª´ API</h4>
        <div className="bg-white rounded-lg border p-4 max-h-96 overflow-y-auto">
          <div 
            className="text-sm leading-relaxed"
            dangerouslySetInnerHTML={{ __html: htmlContent }}
          />
        </div>
        <div className="mt-3 text-xs text-orange-700 bg-orange-100 p-2 rounded">
          <p>
            <strong>L∆∞u √Ω:</strong> ƒê√¢y l√† n·ªôi dung HTML g·ªëc t·ª´ API. M·ªôt s·ªë ph·∫ßn t·ª≠ c√≥ th·ªÉ kh√¥ng hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß do 
            thi·∫øu CSS ho·∫∑c JavaScript t·ª´ trang web g·ªëc.
          </p>
        </div>
      </div>
    </div>
  );
}

interface HanoiPlanningMapProps {
  height?: string;
  showControls?: boolean;
  className?: string;
}

export default function HanoiPlanningMap({ 
  height = '600px', 
  showControls = true,
  className = ''
}: HanoiPlanningMapProps) {
  const [isClient, setIsClient] = useState(false);
  const [geoapifyApiKey, setGeoapifyApiKey] = useState<string | null>(null);
  const [planningData, setPlanningData] = useState<PlanningData | null>(null);
  const [selectedLocation, setSelectedLocation] = useState<[number, number] | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Function to call planning API
  const handleMapClick = async (lat: number, lng: number) => {
    setIsLoading(true);
    setError(null);
    setSelectedLocation([lat, lng]);

    console.log('Map clicked at:', lat, lng); // Debug log

    try {
      const response = await fetch('/api/guland-proxy/planning', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          marker_lat: lat,
          marker_lng: lng,
          province_id: 1 // Default to H√† N·ªôi (you can adjust this based on the click location)
        }),
      });

      const data: PlanningData = await response.json();
      console.log('Planning API response:', data); // Debug log
      setPlanningData(data);
      
      // Check if we have HTML data
      if (data?.data?.html) {
        console.log('HTML data found, length:', data.data.html.length); // Debug log
      } else {
        console.log('No HTML data in response'); // Debug log
      }
    } catch (err) {
      console.error('Planning API error:', err); // Debug log
      setError('L·ªói khi l·∫•y th√¥ng tin quy ho·∫°ch: ' + (err as Error).message);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    setIsClient(true);
    
    // Get Geoapify API key
    try {
      const apiKey = getGeoapifyApiKey();
      setGeoapifyApiKey(apiKey);
    } catch (error) {
      console.warn('Geoapify API key not found:', error);
    }
    
    // Fix for default markers in react-leaflet
    delete (L.Icon.Default.prototype as any)._getIconUrl;
    L.Icon.Default.mergeOptions({
      iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
      iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
    });
  }, []);

  if (!isClient) {
    return (
      <div className={`bg-gray-100 animate-pulse rounded-lg flex items-center justify-center ${className}`} style={{ height }}>
        <p className="text-gray-500">ƒêang t·∫£i b·∫£n ƒë·ªì...</p>
      </div>
    );
  }

  // T·ªça ƒë·ªô trung t√¢m H√† N·ªôi
  const center: [number, number] = [21.0285, 105.8542];
  
  // M·ªôt s·ªë ƒëi·ªÉm demo tr√™n b·∫£n ƒë·ªì H√† N·ªôi
  const demoPoints = [
    {
      id: 1,
      name: "H·ªì Ho√†n Ki·∫øm",
      position: [21.0285, 105.8542] as [number, number],
      description: "Trung t√¢m l·ªãch s·ª≠ c·ªßa H√† N·ªôi"
    },
    {
      id: 2,
      name: "Khu v·ª±c C·∫ßu Gi·∫•y",
      position: [21.0337, 105.7981] as [number, number],
      description: "Khu ƒë√¥ th·ªã m·ªõi, trung t√¢m c√¥ng ngh·ªá"
    },
    {
      id: 3,
      name: "Khu v·ª±c Thanh Xu√¢n",
      position: [20.9876, 105.8125] as [number, number],
      description: "Khu d√¢n c∆∞ ƒë√¥ng ƒë√∫c"
    }
  ];
  return (
    <div className={className}>
      {/* Map Container */}
      <div className="rounded-lg overflow-hidden relative" style={{ height }}>
        <MapContainer
          center={center}
          zoom={12}
          style={{ height: '100%', width: '100%' }}
          zoomControl={showControls}
        >
          <MapClickHandler onMapClick={handleMapClick} />
          
          {/* Base Map: Geoapify */}
          {geoapifyApiKey && (
            <TileLayer
              url={`https://maps.geoapify.com/v1/tile/osm-bright/{z}/{x}/{y}.png?apiKey=${geoapifyApiKey}`}
              attribution='&copy; <a href="https://www.geoapify.com/">Geoapify</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
              maxZoom={15}
              opacity={1}
            />
          )}
          
          {/* Layer 1: B·∫£n ƒë·ªì quy ho·∫°ch H√† N·ªôi 2030 (n·ªÅn) */}
          <TileLayer
            url="https://l5cfglaebpobj.vcdn.cloud/ha-noi-2030-2/{z}/{x}/{y}.png"
            attribution='&copy; B·∫£n ƒë·ªì quy ho·∫°ch H√† N·ªôi 2030'
            maxZoom={15}
            opacity={0.7}
          />
          
          {/* Layer 2: B·∫£n ƒë·ªì ƒë·∫•t ƒëai H√† N·ªôi (overlay) */}
          <TileLayer
            url="https://s3-hn-2.cloud.cmctelecom.vn/guland7/land/ha-noi/{z}/{x}/{y}.png"
            attribution='&copy; B·∫£n ƒë·ªì ƒë·∫•t ƒëai H√† N·ªôi'
            maxZoom={15}
            opacity={0.5}
          />
          
          {/* Selected location marker */}
          {selectedLocation && (
            <Marker position={selectedLocation}>
              <Popup>
                <div className="p-2">
                  <h3 className="font-semibold">V·ªã tr√≠ ƒë√£ ch·ªçn</h3>
                  <p className="text-sm">
                    T·ªça ƒë·ªô: {selectedLocation[0].toFixed(6)}, {selectedLocation[1].toFixed(6)}
                  </p>
                  {isLoading && <p className="text-blue-600 text-sm">ƒêang t·∫£i th√¥ng tin quy ho·∫°ch...</p>}
                  {error && <p className="text-red-600 text-sm">{error}</p>}
                </div>
              </Popup>
            </Marker>
          )}

          {/* Planning polygon */}
          {planningData?.data?.points && planningData.data.points.length > 0 && (
            <Polygon
              positions={planningData.data.points.map(p => [p.lat, p.lng] as [number, number])}
              color="red"
              fillColor="red"
              fillOpacity={0.3}
              weight={2}
            >
              <Popup>
                <div className="p-2 max-w-sm">
                  <h3 className="font-semibold">Th√¥ng tin th·ª≠a ƒë·∫•t</h3>
                  <p className="text-sm mb-2">{planningData.data.address}</p>
                  <div className="text-xs text-gray-600">
                    <p>ID: {planningData.data.id}</p>
                    <p>T·ªânh/TP: {planningData.data.province_id}</p>
                    <p>Qu·∫≠n/Huy·ªán: {planningData.data.district_id}</p>
                    <p>Ph∆∞·ªùng/X√£: {planningData.data.ward_id}</p>
                  </div>
                </div>
              </Popup>
            </Polygon>
          )}
            {/* C√°c marker demo */}
          {demoPoints.map((point) => (
            <Marker key={point.id} position={point.position}>
              <Popup>
                <div className="p-2">
                  <h3 className="font-semibold text-lg">{point.name}</h3>
                  <p className="text-sm text-gray-600 mt-1">{point.description}</p>
                  <div className="mt-2 text-xs text-gray-500">
                    <p>T·ªça ƒë·ªô: {point.position[0]}, {point.position[1]}</p>
                  </div>
                </div>
              </Popup>
            </Marker>
          ))}
        </MapContainer>
        
        {/* Instructions overlay */}
        <div className="absolute top-4 right-4 bg-white p-3 rounded-lg shadow-lg border z-[1000] max-w-xs">
          <h4 className="font-semibold text-sm mb-1">üí° H∆∞·ªõng d·∫´n</h4>
          <p className="text-xs text-gray-600">
            Click v√†o b·∫£n ƒë·ªì ƒë·ªÉ xem th√¥ng tin quy ho·∫°ch chi ti·∫øt t·∫°i v·ªã tr√≠ ƒë√≥
          </p>
        </div>
        
        {/* Legend */}
        <div className="absolute bottom-4 left-4 bg-white p-3 rounded-lg shadow-lg border z-[1000]">
          <h4 className="font-semibold text-sm mb-2">Ch√∫ th√≠ch:</h4>
          <div className="space-y-1 text-xs">
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-purple-500 rounded"></div>
              <span>Geoapify Base Map</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-blue-500 rounded opacity-70"></div>
              <span>Quy ho·∫°ch H√† N·ªôi 2030</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-green-500 rounded opacity-50"></div>
              <span>B·∫£n ƒë·ªì ƒë·∫•t ƒëai</span>
            </div>
          </div>
        </div>

        {/* Status indicator for debugging */}
        {(selectedLocation || isLoading || planningData) && (
          <div className="absolute top-4 left-4 bg-white p-2 rounded-lg shadow-lg border z-[1000] text-xs">
            <div className="space-y-1">
              {selectedLocation && (
                <div className="text-blue-600">
                  üìç ƒê√£ ch·ªçn: {selectedLocation[0].toFixed(4)}, {selectedLocation[1].toFixed(4)}
                </div>
              )}
              {isLoading && <div className="text-yellow-600">‚è≥ ƒêang t·∫£i...</div>}
              {planningData && (
                <div className="text-green-600">
                  ‚úÖ C√≥ d·ªØ li·ªáu: {planningData.data?.html ? 'HTML c√≥' : 'Kh√¥ng c√≥ HTML'}
                </div>
              )}
            </div>
          </div>
        )}
      </div>
        
      {/* Planning Information Panel - Moved outside map container */}
      {planningData?.data?.html && (
        <div className="mt-6 bg-white rounded-xl shadow-lg border overflow-hidden">
          <div className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-b">
            <div className="flex items-start justify-between">
              <div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">üìã Th√¥ng tin quy ho·∫°ch chi ti·∫øt</h3>
                <p className="text-sm text-gray-600 mb-1">{planningData.data.address}</p>
                <div className="flex items-center gap-4 text-xs text-gray-500">
                  <span>üÜî ID: {planningData.data.id}</span>
                  <span>üè¢ T·ªânh/TP: {planningData.data.province_id}</span>
                  <span>üèòÔ∏è Qu·∫≠n/Huy·ªán: {planningData.data.district_id}</span>
                  <span>üè† Ph∆∞·ªùng/X√£: {planningData.data.ward_id}</span>
                </div>
              </div>
              <button
                onClick={() => setPlanningData(null)}
                className="text-gray-500 hover:text-gray-700 transition-colors"
                title="ƒê√≥ng th√¥ng tin"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
          <div className="p-6">
            <PlanningInfoDisplay htmlContent={planningData.data.html} />
          </div>
        </div>
      )}
        
      {/* Loading indicator */}
      {isLoading && (
        <div className="mt-6 p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg border-l-4 border-blue-400">
          <div className="flex items-center">
            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-3"></div>
            <div>
              <p className="text-blue-700 font-medium">ƒêang t·∫£i th√¥ng tin quy ho·∫°ch...</p>
              <p className="text-blue-600 text-sm">Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
            </div>
          </div>
        </div>
      )}
      
      {/* Error message */}
      {error && (
        <div className="mt-6 p-4 bg-gradient-to-r from-red-50 to-red-100 rounded-lg border-l-4 border-red-400">
          <div className="flex items-start">
            <div className="text-red-500 mr-3 mt-0.5">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div>
              <p className="text-red-700 font-medium">L·ªói khi t·∫£i th√¥ng tin</p>
              <p className="text-red-600 text-sm">{error}</p>
              <button
                onClick={() => setError(null)}
                className="mt-2 text-sm text-red-600 hover:text-red-800 underline"
              >
                ƒê√≥ng th√¥ng b√°o
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
