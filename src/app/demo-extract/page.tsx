'use client';

import { extractAIData, extractKeyInsights, formatCurrency } from '@/lib/utils';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useState } from 'react';

// Your JSON data
const rawAIData = {
  "input_coordinates": [10.77650017960953, 106.69811367988588],
  "ai_valuation": {
    "success": true,
    "result": {
      "valuation": {
        "highValue": 4976004000,
        "lowValue": 3677916000,
        "price_house": 1730784000,
        "reasonableValue": 4326960000
      },
      "property_info": {
        "address": "10¬∞46'35.4\"N 106¬∞41'53.2\"E, Ph∆∞·ªùng B·∫øn Th√†nh, Qu·∫≠n 1, H·ªì Ch√≠ Minh",
        "location": {
          "city": "ho_chi_minh",
          "district": "quan_1",
          "ward": "ben_thanh"
        },
        "specifications": {
          "type": "lane_house",
          "land_area": 33,
          "house_area": 33,
          "bedrooms": 3,
          "bathrooms": 2,
          "lane_width": 3,
          "facade_width": 3,
          "story_number": 4,
          "legal": "contract"
        }
      },
      "market_context": {
        "category": "nha_hem_ngo",
        "data_source": "API"
      }
    }
  },
  "ai_analysis": {
    "success": true,
    "result": {
      "radarScore": {
        "descriptions": [
          "T√¨nh tr·∫°ng ph√°p l√Ω 'h·ª£p ƒë·ªìng' ti·ªÅm ·∫©n r·ªßi ro v√† kh√¥ng ƒë·∫£m b·∫£o quy·ªÅn s·ªü h·ªØu ƒë·∫ßy ƒë·ªß theo Lu·∫≠t ƒê·∫•t ƒëai m·ªõi c√≥ hi·ªáu l·ª±c nƒÉm 2025.",
          "Thanh kho·∫£n r·∫•t t·ªët nh·ªù v·ªã tr√≠ trung t√¢m Qu·∫≠n 1 v√† xu h∆∞·ªõng tƒÉng gi√° m·∫°nh c·ªßa th·ªã tr∆∞·ªùng, d√π l·ªô gi·ªõi h·∫ªm c√≥ ph·∫ßn h·∫°n ch·∫ø.",
          "V·ªã tr√≠ c·ª±c k·ª≥ ƒë·∫Øc ƒë·ªãa t·∫°i trung t√¢m Qu·∫≠n 1, ti·∫øp c·∫≠n m·ªçi ti·ªán √≠ch v√† h·∫° t·∫ßng v∆∞·ª£t tr·ªôi, ƒë·∫£m b·∫£o gi√° tr·ªã l√¢u d√†i.",
          "Gi√° tr·ªã th·∫©m ƒë·ªãnh cao, ph·∫£n √°nh ƒë√∫ng xu h∆∞·ªõng tƒÉng tr∆∞·ªüng m·∫°nh c·ªßa th·ªã tr∆∞·ªùng Qu·∫≠n 1 v√† gi√° giao d·ªãch th·ª±c t·∫ø.",
          "Ti·ªÅm nƒÉng sinh l·ªùi v∆∞·ª£t tr·ªôi t·ª´ c·∫£ cho thu√™ v√† tƒÉng gi√° v·ªën, ƒë·∫∑c bi·ªát trong b·ªëi c·∫£nh th·ªã tr∆∞·ªùng ƒëang ph·ª•c h·ªìi t√≠ch c·ª±c."
        ],
        "dividendScore": 9,
        "evaluationScore": 9,
        "legalityScore": 2,
        "liquidityScore": 8,
        "locationScore": 10
      }
    }
  },
  "success": true,
  "error": null
};

export default function DemoExtractPage() {
  const [selectedTab, setSelectedTab] = useState<'raw' | 'transformed' | 'insights'>('insights');

  // Transform data to match component expectations
  const transformedData = extractAIData(rawAIData);
  
  // Extract key insights
  const insights = extractKeyInsights(rawAIData);

  return (
    <div className="container mx-auto py-8 px-4 space-y-6">
      <div className="text-center space-y-4">
        <h1 className="text-3xl font-bold text-slate-800">Demo: Extract AI Data</h1>
        <p className="text-slate-600">C√°ch l·∫•y th√¥ng tin t·ª´ ai_analysis v√† ai_valuation</p>
        
        {/* Tab Buttons */}
        <div className="flex justify-center gap-2">
          <button
            onClick={() => setSelectedTab('insights')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              selectedTab === 'insights' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            Key Insights
          </button>
          <button
            onClick={() => setSelectedTab('transformed')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              selectedTab === 'transformed' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            Transformed Data
          </button>
          <button
            onClick={() => setSelectedTab('raw')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              selectedTab === 'raw' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            Raw Data
          </button>
        </div>
      </div>

      {/* Key Insights Tab */}
      {selectedTab === 'insights' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Valuation Insights */}
          <Card className="bg-gradient-to-br from-emerald-50 to-emerald-100">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <span className="text-emerald-700">üí∞ Th√¥ng tin ƒë·ªãnh gi√°</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="text-center p-3 bg-white rounded-lg border border-emerald-200">
                  <p className="text-sm text-emerald-600 font-medium">Gi√° th·∫•p nh·∫•t</p>
                  <p className="text-xl font-bold text-emerald-700">{insights.valuation.formattedLow}</p>
                </div>
                <div className="text-center p-3 bg-white rounded-lg border border-emerald-200">
                  <p className="text-sm text-emerald-600 font-medium">Gi√° ph√π h·ª£p</p>
                  <p className="text-xl font-bold text-emerald-700">{insights.valuation.formattedReasonable}</p>
                </div>
                <div className="text-center p-3 bg-white rounded-lg border border-emerald-200">
                  <p className="text-sm text-emerald-600 font-medium">Gi√° cao nh·∫•t</p>
                  <p className="text-xl font-bold text-emerald-700">{insights.valuation.formattedHigh}</p>
                </div>
                <div className="text-center p-3 bg-white rounded-lg border border-emerald-200">
                  <p className="text-sm text-emerald-600 font-medium">Gi√° nh√†</p>
                  <p className="text-xl font-bold text-emerald-700">{insights.valuation.formattedPriceHouse}</p>
                </div>
              </div>
              
              {/* Property Info */}
              <div className="bg-white p-4 rounded-lg border border-emerald-200">
                <h4 className="font-semibold text-emerald-700 mb-2">Th√¥ng tin BƒêS:</h4>
                <div className="text-sm space-y-1">
                  <p><strong>ƒê·ªãa ch·ªâ:</strong> {rawAIData.ai_valuation?.result?.property_info?.address || 'N/A'}</p>
                  <p><strong>Lo·∫°i:</strong> {rawAIData.ai_valuation?.result?.property_info?.specifications?.type || 'N/A'}</p>
                  <p><strong>Di·ªán t√≠ch:</strong> {rawAIData.ai_valuation?.result?.property_info?.specifications?.land_area || 0}m¬≤</p>
                  <p><strong>Ph√≤ng ng·ªß:</strong> {rawAIData.ai_valuation?.result?.property_info?.specifications?.bedrooms || 0}</p>
                  <p><strong>Ph√≤ng t·∫Øm:</strong> {rawAIData.ai_valuation?.result?.property_info?.specifications?.bathrooms || 0}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Analysis Insights */}
          <Card className="bg-gradient-to-br from-purple-50 to-purple-100">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <span className="text-purple-700">üìä Ph√¢n t√≠ch ƒë√°nh gi√°</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Overall Score */}
              <div className="text-center p-4 bg-white rounded-lg border border-purple-200">
                <p className="text-sm text-purple-600 font-medium">ƒêi·ªÉm t·ªïng h·ª£p</p>
                <p className="text-3xl font-bold text-purple-700">{insights.analysis.overallScore.toFixed(1)}/10</p>
              </div>

              {/* Individual Scores */}
              <div className="space-y-2">
                {[
                  { label: 'V·ªã tr√≠', score: insights.analysis.locationScore, color: 'emerald' },
                  { label: 'Ph√°p l√Ω', score: insights.analysis.legalityScore, color: 'blue' },
                  { label: 'Thanh kho·∫£n', score: insights.analysis.liquidityScore, color: 'amber' },
                  { label: 'Th·∫©m ƒë·ªãnh', score: insights.analysis.evaluationScore, color: 'purple' },
                  { label: 'Sinh l·ªùi', score: insights.analysis.dividendScore, color: 'red' },
                ].map((item, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-white rounded border border-purple-200">
                    <span className="text-sm font-medium">{item.label}</span>
                    <div className="flex items-center gap-2">
                      <div className="w-20 h-2 bg-gray-200 rounded-full overflow-hidden">
                        <div 
                          className={`h-full bg-${item.color}-500 transition-all`}
                          style={{ width: `${(item.score / 10) * 100}%` }}
                        />
                      </div>
                      <Badge variant="outline" className="min-w-[40px] text-center">
                        {item.score}/10
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>

              {/* Descriptions */}
              <div className="bg-white p-4 rounded-lg border border-purple-200">
                <h4 className="font-semibold text-purple-700 mb-2">M√¥ t·∫£ chi ti·∫øt:</h4>
                <div className="space-y-2 text-sm">
                  {insights.analysis.descriptions.map((desc, index) => (
                    <p key={index} className="text-slate-600">‚Ä¢ {desc}</p>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Transformed Data Tab */}
      {selectedTab === 'transformed' && (
        <Card>
          <CardHeader>
            <CardTitle>üîÑ Transformed Data (Component-Ready)</CardTitle>
            <p className="text-sm text-slate-600">D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c transform ƒë·ªÉ ph√π h·ª£p v·ªõi components</p>
          </CardHeader>
          <CardContent>
            <pre className="bg-slate-100 p-4 rounded-lg overflow-auto text-sm">
              {JSON.stringify(transformedData, null, 2)}
            </pre>
          </CardContent>
        </Card>
      )}

      {/* Raw Data Tab */}
      {selectedTab === 'raw' && (
        <Card>
          <CardHeader>
            <CardTitle>üìÑ Raw Data</CardTitle>
            <p className="text-sm text-slate-600">D·ªØ li·ªáu g·ªëc t·ª´ API</p>
          </CardHeader>
          <CardContent>
            <pre className="bg-slate-100 p-4 rounded-lg overflow-auto text-sm">
              {JSON.stringify(rawAIData, null, 2)}
            </pre>
          </CardContent>
        </Card>
      )}

      {/* Usage Example */}
      <Card className="bg-gradient-to-r from-blue-50 to-indigo-50">
        <CardHeader>
          <CardTitle className="text-blue-700">üöÄ C√°ch s·ª≠ d·ª•ng</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="bg-white p-4 rounded-lg border border-blue-200">
            <h4 className="font-semibold text-blue-700 mb-2">1. Import helper functions:</h4>
            <pre className="bg-slate-100 p-2 rounded text-sm">
{`import { extractAIData, extractKeyInsights } from '@/lib/utils';`}
            </pre>
          </div>

          <div className="bg-white p-4 rounded-lg border border-blue-200">
            <h4 className="font-semibold text-blue-700 mb-2">2. Transform data:</h4>
            <pre className="bg-slate-100 p-2 rounded text-sm">
{`// For components (RightPanelValuation, RightPanelRadarChart)
const transformedData = extractAIData(rawData);

// For easy access to values
const insights = extractKeyInsights(rawData);`}
            </pre>
          </div>

          <div className="bg-white p-4 rounded-lg border border-blue-200">
            <h4 className="font-semibold text-blue-700 mb-2">3. S·ª≠ d·ª•ng trong components:</h4>
            <pre className="bg-slate-100 p-2 rounded text-sm">
{`// Valuation values
console.log(insights.valuation.formattedReasonable); // "4.3 T·ª∑"
console.log(insights.valuation.reasonableValue);     // 4326960000

// Analysis scores  
console.log(insights.analysis.overallScore);        // 7.6
console.log(insights.analysis.locationScore);       // 10
console.log(insights.analysis.descriptions);        // Array of descriptions`}
            </pre>
          </div>
        </CardContent>
      </Card>
    </div>
  );
} 