'use server';

import { z } from 'zod';
import { propertyValuationRange } from '@/ai/flows/property-valuation';
import { propertySummary } from '@/ai/flows/property-summary';
import type { CombinedResult, PropertyInputSchema, ApiValuationResult } from '@/lib/types';
import { config } from '@/lib/config';

const propertyInputSchema = z.object({
  address: z.string().min(5, 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ h·ª£p l·ªá.'),
  size: z.coerce.number().min(10, 'Di·ªán t√≠ch ph·∫£i l·ªõn h∆°n 10m¬≤.'),
  bedrooms: z.coerce.number().min(1, 'Ph·∫£i c√≥ √≠t nh·∫•t 1 ph√≤ng ng·ªß.'),
  bathrooms: z.coerce.number().min(1, 'Ph·∫£i c√≥ √≠t nh·∫•t 1 ph√≤ng t·∫Øm.'),
  lotSize: z.coerce.number().min(10, 'Di·ªán t√≠ch l√¥ ƒë·∫•t ph·∫£i l·ªõn h∆°n 10m¬≤.'),
});

// Generate mock valuation data when API fails
function generateMockValuation(payload: any) {
  const basePricePerSqm = 65000000; // 65M VND per sqm (base price)
  const locationMultiplier = Math.random() * 0.4 + 0.8; // 0.8 - 1.2
  const housePrice = payload.houseArea * basePricePerSqm * locationMultiplier;
  const landPrice = payload.landArea * basePricePerSqm * 0.7 * locationMultiplier;
  const totalPrice = housePrice + landPrice;

  return {
    evaluation: {
      address: {
        type: 'NORMAL',
        city: payload.address?.city || 'ha_noi',
        district: payload.address?.district || 'dong_da',
        ward: payload.address?.ward || 'lang_thuong',
        administrativeLevel: 0,
      },
      bathRoom: payload.bathRoom || 2,
      bedRoom: payload.bedRoom || 3,
      builtYear: new Date().getFullYear() - 5,
      cityCenterDistance: Math.random() * 20 + 5,
      cityLevel: 1,
      clusterPrices: [[], [], []],
      createdDate: new Date().toISOString(),
      districtCenterDistance: Math.random() * 5 + 0.5,
      districtLevel: 1,
      facadeWidth: payload.facadeWidth || 4,
      geoLocation: payload.geoLocation || [105.8342, 21.0278],
      hasGarden: payload.hasGarden || false,
      homeQualityRemaining: 0,
      houseArea: payload.houseArea || 45,
      housePrice: housePrice,
      landArea: payload.landArea || 60,
      laneWidth: payload.laneWidth || 10,
      legal: payload.legal || "pink_book",
      modifiedDate: new Date().toISOString(),
      ownerId: 44724,
      price: 0,
      radarScore: {
        descriptions: [
          'B·∫•t ƒë·ªông s·∫£n c√≥ v·ªã tr√≠ kh√° thu·∫≠n l·ª£i v·ªõi nhi·ªÅu ti·ªán √≠ch xung quanh, ph√π h·ª£p cho vi·ªác sinh s·ªëng v√† ƒë·∫ßu t∆∞.',
          'Ph√°p l√Ω r√µ r√†ng v·ªõi s·ªï ƒë·ªè ch√≠nh ch·ªß, ƒë·∫£m b·∫£o quy·ªÅn s·ªü h·ªØu cho ng∆∞·ªùi mua.',
          'Khu v·ª±c c√≥ ti·ªÅm nƒÉng ph√°t tri·ªÉn t·ªët trong t∆∞∆°ng lai nh·ªù c√°c d·ª± √°n h·∫° t·∫ßng.',
          'Gi√° b√°n ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng hi·ªán t·∫°i, c·∫°nh tranh v·ªõi c√°c b·∫•t ƒë·ªông s·∫£n c√πng khu v·ª±c.'
        ],
        dividendScore: Math.floor(Math.random() * 3) + 6, // 6-8
        evaluationScore: Math.floor(Math.random() * 2) + 6.5, // 6.5-7.5
        legalityScore: Math.floor(Math.random() * 2) + 8, // 8-9
        liquidityScore: Math.floor(Math.random() * 3) + 5, // 5-7
        locationScore: Math.floor(Math.random() * 3) + 6 // 6-8
      },
      storyNumber: payload.storyNumber || 3,
      totalPrice: totalPrice,
      transId: Date.now(),
      type: payload.type || "town_house",
      year: new Date().getFullYear()
    }
  };
}

// Real API valuation using Resta.vn
export async function getRealApiValuation(
  data: PropertyInputSchema & { latitude?: number; longitude?: number }
): Promise<{ success: true; data: ApiValuationResult } | { success: false; error: string }> {
  const validatedFields = propertyInputSchema.safeParse(data);

  if (!validatedFields.success) {
    return {
      success: false,
      error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c tr∆∞·ªùng th√¥ng tin.',
    };
  }

  try {
    // Use coordinates if provided, otherwise default to Hanoi center
    const coordinates = {
      latitude: data.latitude || 21.0282993,
      longitude: data.longitude || 105.8539963
    };

    const result: {
      input_coordinates: [number, number];
      location_info: any;
      parsed_address: any;
      valuation_payload: any;
      valuation_result: any;
      success: boolean;
      error: string | null;
    } = {
      input_coordinates: [coordinates.latitude, coordinates.longitude],
      location_info: null,
      parsed_address: null,
      valuation_payload: null,
      valuation_result: null,
      success: false,
      error: null,
    };

    // Step 1: Get location info from coordinates
    const locationUrl = 'https://apis.resta.vn/erest-listing/features/location';
    const locationParams = new URLSearchParams({
      latitude: coordinates.latitude.toString(),
      longitude: coordinates.longitude.toString(),
    });

    const locationHeaders = {
      'accept-encoding': 'gzip',
      'host': 'apis.resta.vn',
      'user-agent': 'Dart/2.19 (dart:io)',
    };

    const locationResponse = await fetch(`${locationUrl}?${locationParams}`, {
      method: 'GET',
      headers: locationHeaders,
    });

    if (!locationResponse.ok) {
      throw new Error('Cannot get location information from coordinates');
    }

    const locationData = await locationResponse.json();
    result.location_info = locationData;

    // Step 2: Parse location information
    const features = locationData?.features || [];
    if (!features.length) {
      throw new Error('Cannot parse location information');
    }

    const mainFeature = features[0];
    const parsedAddress = {
      city: mainFeature?.c || '',
      district: mainFeature?.d || '',
      ward: mainFeature?.w || '',
      coordinates: mainFeature?.g || [],
      formatted_address: mainFeature?.dt || '',
      polygon: mainFeature?.polygon || [],
      bounding_box: mainFeature?.bb || [],
    };

    result.parsed_address = parsedAddress;

    // Step 3: Create valuation payload
    const propertyDetails = {
      type: 'town_house',
      landArea: validatedFields.data.lotSize,
      houseArea: validatedFields.data.size,
      bedRoom: validatedFields.data.bedrooms,
      bathRoom: validatedFields.data.bathrooms,
      storyNumber: 3,
      facadeWidth: 4,
      laneWidth: 10,
      legal: 'pink_book',
      hasGarden: false,
      year: new Date().getFullYear()
    };

    const payload = {
      type: propertyDetails.type,
      transId: Date.now(),
      geoLocation: parsedAddress.coordinates,
      address: {
        city: parsedAddress.city,
        district: parsedAddress.district,
        ward: parsedAddress.ward,
        addressCode: null,
        name: parsedAddress.formatted_address,
        detail: parsedAddress.formatted_address,
      },
      landArea: propertyDetails.landArea,
      houseArea: propertyDetails.houseArea,
      laneWidth: propertyDetails.laneWidth,
      'homeQualityRemaining ': 0.0,
      facadeWidth: propertyDetails.facadeWidth,
      storyNumber: propertyDetails.storyNumber,
      bedRoom: propertyDetails.bedRoom,
      bathRoom: propertyDetails.bathRoom,
      legal: propertyDetails.legal,
      utilities: null,
      strengths: null,
      weaknesses: null,
    };

    result.valuation_payload = payload;

    // Step 4: Perform valuation
    const authToken = config.resta.authTokenLegacy;
    
    try {
      const valuationUrl = 'https://apis.resta.vn/erest-listing/real-estate-evaluations';

      const valuationHeaders = {
        'accept-encoding': 'gzip',
        'authorization': `Bearer ${authToken}`,
        'content-type': 'text/plain; charset=utf-8',
        'user-agent': 'Dart/2.19 (dart:io)',
      };

      const valuationResponse = await fetch(valuationUrl, {
        method: 'POST',
        headers: valuationHeaders,
        body: JSON.stringify(payload),
      });

      if (!valuationResponse.ok) {
        const errorText = await valuationResponse.text();
        console.error('API Error:', errorText);
        
        // If token is invalid, return mock data instead of failing
        if (valuationResponse.status === 401) {
          console.log('üîÑ Token expired, generating mock data...');
          const mockValuation = generateMockValuation(payload);
          result.valuation_result = mockValuation;
          result.success = true;
          result.error = 'Using mock data due to API authentication issue';
          return { success: true, data: result };
        }
        
        throw new Error(`Valuation failed with status ${valuationResponse.status}: ${errorText}`);
      }

      const valuationResult = await valuationResponse.json();
      result.valuation_result = valuationResult;
      result.success = true;

      return { success: true, data: result };
      
    } catch (apiError) {
      console.error('Valuation API Error:', apiError);
      
      // Fallback to mock data if API fails
      console.log('üîÑ API failed, generating mock data...');
      const mockValuation = generateMockValuation(payload);
      result.valuation_result = mockValuation;
      result.success = true;
      result.error = 'Using mock data due to API issue';
      return { success: true, data: result };
    }
  } catch (error) {
    console.error('Real API Valuation Error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh ƒë·ªãnh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.',
    };
  }
}

export async function getValuationAndSummary(
  data: PropertyInputSchema
): Promise<{ success: true; data: CombinedResult } | { success: false; error: string }> {
  const validatedFields = propertyInputSchema.safeParse(data);

  if (!validatedFields.success) {
    return {
      success: false,
      error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c tr∆∞·ªùng th√¥ng tin.',
    };
  }

  try {
    const marketData =
      'Th·ªã tr∆∞·ªùng ƒë·ªãa ph∆∞∆°ng ƒëang c√≥ nhu c·∫ßu cao, c√°c b·∫•t ƒë·ªông s·∫£n ƒëang ƒë∆∞·ª£c b√°n cao h∆°n 5-10% so v·ªõi gi√° y√™u c·∫ßu. C√°c d·ª± √°n h·∫° t·∫ßng g·∫ßn ƒë√¢y, bao g·ªìm m·ªôt tr·∫°m t√†u ƒëi·ªán m·ªõi, ƒë√£ l√†m tƒÉng gi√° tr·ªã b·∫•t ƒë·ªông s·∫£n trong 6 th√°ng qua. ƒê∆°n gi√° trung b√¨nh m·ªói m√©t vu√¥ng l√† 65 tri·ªáu ƒë·ªìng.';

    const valuationPromise = propertyValuationRange({
      ...validatedFields.data,
      marketData,
    });

    const summaryDetails = {
      location: {
        score: 9,
        details:
          'V·ªã tr√≠ ƒë·∫Øc ƒë·ªãa t·∫°i trung t√¢m, g·∫ßn khu t√†i ch√≠nh v√† c√°c ƒë·ªãa ƒëi·ªÉm gi·∫£i tr√≠. Ch·ªâ s·ªë ƒëi b·ªô cao. C√≥ th·ªÉ c√≥ ti·∫øng ·ªìn t·ª´ ƒë∆∞·ªùng ph·ªë.',
      },
      utilities: {
        score: 7,
        details:
          'Giao th√¥ng c√¥ng c·ªông thu·∫≠n ti·ªán. C√≥ nhi·ªÅu c·ª≠a h√†ng t·∫°p h√≥a, nh∆∞ng c√°c c·ª≠a h√†ng ƒë·∫∑c s·∫£n c·∫ßn di chuy·ªÉn m·ªôt qu√£ng ng·∫Øn. M·ªôt ph√≤ng kh√°m m·ªõi v·ª´a m·ªü g·∫ßn ƒë√¢y.',
      },
      planning: {
        score: 8,
        details:
          'Khu v·ª±c n·∫±m trong k·∫ø ho·∫°ch ch·ªânh trang ƒë√¥ th·ªã, v·ªõi c√°c c√¥ng vi√™n v√† kh√¥ng gian c√¥ng c·ªông m·ªõi ƒë∆∞·ª£c quy ho·∫°ch. Kh√¥ng c√≥ c√¥ng tr√¨nh x√¢y d·ª±ng l·ªõn g√¢y ·∫£nh h∆∞·ªüng trong th·ªùi gian t·ªõi.',
      },
      legal: {
        score: 10,
        details:
          'T√¨nh tr·∫°ng ph√°p l√Ω ho√†n h·∫£o v·ªõi ƒë·∫ßy ƒë·ªß gi·∫•y t·ªù ƒë√£ ƒë∆∞·ª£c x√°c minh (s·ªï ƒë·ªè ch√≠nh ch·ªß). Kh√¥ng c√≥ l·ªãch s·ª≠ tranh ch·∫•p hay th·∫ø ch·∫•p. S·ªï s√°ch r√µ r√†ng.',
      },
      quality: {
        score: 7,
        details:
          'C√¥ng tr√¨nh x√¢y d·ª±ng hi·ªán ƒë·∫°i (x√¢y nƒÉm 2018). N·ªôi th·∫•t cao c·∫•p. C√°c ti·ªán √≠ch chung c·ªßa t√≤a nh√† (ph√≤ng gym, h·ªì b∆°i) ƒë∆∞·ª£c b·∫£o tr√¨ t·ªët. C√≥ m·ªôt v√†i hao m√≤n nh·ªè v·ªÅ th·∫©m m·ªπ ·ªü khu v·ª±c chung.',
      },
    };

    const summaryPromise = propertySummary({
      locationScore: summaryDetails.location.score,
      locationDetails: summaryDetails.location.details,
      utilitiesScore: summaryDetails.utilities.score,
      utilitiesDetails: summaryDetails.utilities.details,
      planningScore: summaryDetails.planning.score,
      planningDetails: summaryDetails.planning.details,
      legalScore: summaryDetails.legal.score,
      legalDetails: summaryDetails.legal.details,
      qualityScore: summaryDetails.quality.score,
      qualityDetails: summaryDetails.quality.details,
    });

    const [valuation, summary] = await Promise.all([
      valuationPromise,
      summaryPromise,
    ]);

    return { success: true, data: { valuation, summary, summaryDetails } };
  } catch (error) {
    console.error(error);
    return {
      success: false,
      error: 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh ƒë·ªãnh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.',
    };
  }
}
