'use client';

import { useState } from 'react';
import { InteractiveMapSimple } from '@/components/interactive-map-simple';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { getDefaultAuthToken } from '@/lib/config';

interface LocationData {
  latitude: number;
  longitude: number;
  address?: string;
  city?: string;
  district?: string;
  ward?: string;
}

export default function MapDemoPage() {
  const [selectedLocation, setSelectedLocation] = useState<LocationData | null>(null);
  const [authToken, setAuthToken] = useState(getDefaultAuthToken());
  const [valuationResult, setValuationResult] = useState<any>(null);

  const handleLocationSelect = (location: LocationData) => {
    setSelectedLocation(location);
    setValuationResult(null); // Clear previous results
    console.log('Selected location:', location);
  };

  const handleManualValuation = async () => {
    if (!selectedLocation || !authToken) {
      alert('Vui l√≤ng ch·ªçn v·ªã tr√≠ v√† cung c·∫•p auth token');
      return;
    }

    try {
      const response = await fetch('/api/complete-flow', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          latitude: selectedLocation.latitude,
          longitude: selectedLocation.longitude,
          property_details: {
            type: 'town_house',
            landArea: 60.0,
            houseArea: 55.0,
            bedRoom: 3,
            bathRoom: 2,
            legal: 'pink_book',
          },
          auth_token: authToken,
        }),
      });

      const data = await response.json();
      setValuationResult(data);
    } catch (error) {
      console.error('Valuation error:', error);
      alert('L·ªói khi th·ª±c hi·ªán ƒë·ªãnh gi√°');
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-7xl">
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">Interactive Map Demo - ƒê·ªãnh gi√° B·∫•t ƒë·ªông s·∫£n</h1>
        <p className="text-gray-600">
          Demo t√≠nh nƒÉng b·∫£n ƒë·ªì t∆∞∆°ng t√°c s·ª≠ d·ª•ng Geoapify ƒë·ªÉ ch·ªçn v·ªã tr√≠ v√† th·ª±c hi·ªán ƒë·ªãnh gi√° b·∫•t ƒë·ªông s·∫£n.
        </p>
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
        {/* Map Section */}
        <div className="xl:col-span-2">
          <InteractiveMapSimple
            onLocationSelect={handleLocationSelect}
            authToken={authToken}
            showValuationButton={true}
          />
        </div>

        {/* Info Panel */}
        <div className="space-y-6">
          {/* Auth Token Input */}
          <Card>
            <CardHeader>
              <CardTitle>C·∫•u h√¨nh API</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Label htmlFor="authToken">Auth Token</Label>
                <Textarea
                  id="authToken"
                  value={authToken}
                  onChange={(e) => setAuthToken(e.target.value)}
                  placeholder="Nh·∫≠p Bearer token..."
                  className="h-20 text-xs"
                />
              </div>
            </CardContent>
          </Card>

          {/* Selected Location */}
          {selectedLocation && (
            <Card>
              <CardHeader>
                <CardTitle>V·ªã tr√≠ ƒë√£ ch·ªçn</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {selectedLocation.address && (
                  <div>
                    <Label className="text-sm font-medium">ƒê·ªãa ch·ªâ</Label>
                    <p className="text-sm text-gray-700">{selectedLocation.address}</p>
                  </div>
                )}
                
                <div>
                  <Label className="text-sm font-medium">T·ªça ƒë·ªô</Label>
                  <p className="text-sm text-gray-700">
                    {selectedLocation.latitude.toFixed(6)}, {selectedLocation.longitude.toFixed(6)}
                  </p>
                </div>

                {selectedLocation.city && (
                  <div>
                    <Label className="text-sm font-medium">Khu v·ª±c</Label>
                    <div className="flex gap-2 flex-wrap mt-1">
                      <Badge variant="secondary">{selectedLocation.city}</Badge>
                      {selectedLocation.district && <Badge variant="secondary">{selectedLocation.district}</Badge>}
                      {selectedLocation.ward && <Badge variant="secondary">{selectedLocation.ward}</Badge>}
                    </div>
                  </div>
                )}

                <Separator />

                <Button 
                  onClick={handleManualValuation}
                  className="w-full"
                  disabled={!authToken}
                >
                  Th·ª±c hi·ªán ƒë·ªãnh gi√° th·ªß c√¥ng
                </Button>
              </CardContent>
            </Card>
          )}

          {/* API Features */}
          <Card>
            <CardHeader>
              <CardTitle>T√≠nh nƒÉng</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 text-sm">
                <div className="flex items-start gap-2">
                  <span className="text-green-500">‚úÖ</span>
                  <span>T√¨m ki·∫øm ƒë·ªãa ch·ªâ b·∫±ng Geoapify Geocoding API</span>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-green-500">‚úÖ</span>
                  <span>L·∫•y v·ªã tr√≠ hi·ªán t·∫°i b·∫±ng browser geolocation</span>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-green-500">‚úÖ</span>
                  <span>Hi·ªÉn th·ªã b·∫£n ƒë·ªì static v·ªõi marker</span>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-green-500">‚úÖ</span>
                  <span>B·∫£n ƒë·ªì Leaflet t∆∞∆°ng t√°c v·ªõi click tr·ª±c ti·∫øp</span>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-green-500">‚úÖ</span>
                  <span>T√≠ch h·ª£p v·ªõi API ƒë·ªãnh gi√° b·∫•t ƒë·ªông s·∫£n</span>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-green-500">‚úÖ</span>
                  <span>C√°c n√∫t ch·ªçn nhanh ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn</span>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-blue-500">üîÑ</span>
                  <span>L·∫•y th√¥ng tin ƒë·ªãa ch·ªâ t·ª´ t·ªça ƒë·ªô (Resta.vn API)</span>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-blue-500">üîÑ</span>
                  <span>Toast notifications cho feedback</span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Instructions */}
          <Card>
            <CardHeader>
              <CardTitle>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 text-sm">
                <p><strong>1.</strong> Ch·ªçn mode Static ho·∫∑c Interactive</p>
                <p><strong>2.</strong> Click tr·ª±c ti·∫øp tr√™n b·∫£n ƒë·ªì (Interactive mode)</p>
                <p><strong>3.</strong> T√¨m ki·∫øm ƒë·ªãa ch·ªâ trong √¥ search</p>
                <p><strong>4.</strong> Ho·∫∑c nh·∫•n "V·ªã tr√≠ hi·ªán t·∫°i" ƒë·ªÉ d√πng GPS</p>
                <p><strong>5.</strong> Ho·∫∑c click v√†o c√°c n√∫t ch·ªçn nhanh</p>
                <p><strong>6.</strong> Nh·∫•n "ƒê·ªãnh gi√° t·∫°i v·ªã tr√≠ n√†y" ƒë·ªÉ th·ª±c hi·ªán ƒë·ªãnh gi√°</p>
                <p><strong>7.</strong> K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã trong console v√† toast</p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Valuation Result */}
      {valuationResult && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>K·∫øt qu·∫£ ƒë·ªãnh gi√°</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="bg-gray-100 p-4 rounded-md overflow-auto max-h-96 text-sm">
              {JSON.stringify(valuationResult, null, 2)}
            </pre>
          </CardContent>
        </Card>
      )}
    </div>
  );
} 